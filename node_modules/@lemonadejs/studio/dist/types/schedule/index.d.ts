/**
 * Official Type definitions for LemonadeJS plugins
 * https://lemonadejs.net
 * Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
 */

declare function Schedule(el: HTMLElement, options?: Schedule.Options): Schedule.Instance;

declare namespace Schedule {

    interface Event {
        type: string | null,
        title: string,
        start: string,
        guests?: string,
        location?: string,
        description?: string,
        /** Hex color */
        color: string,
        /** Event is readonly */
        readonly?: boolean,
        /** Guid identification */
        guid: string,
        /** Date */
        date?: string,
        /** When the schedule is a weekly schedule */
        weekday?: number,
    }

    interface Options {
        /** Type */
        type?: 'week' | 'day' | 'weekdays';
        /** Weekly Schedule. No date associate to an column just the day of the week. */
        weekly: boolean
        /** Initial Date */
        date?: string;
        /** Grid in minutes. Default: 15 minutes */
        grid?: number;
        /** Accept overlap */
        overlap?: boolean;
        /** Range picker */
        range?: boolean;
        /** On before change event data */
        onbeforechange?: (self: object, state: object) => boolean | void;
        /** On change event data */
        onchange?: (self: object, state: object) => void;
        /** On before create events */
        onbeforecreate?: (self: object, events: Event[], e: MouseEvent) => boolean | void;
        /** On create */
        oncreate?: (self: object, events: Event[], e: MouseEvent) => boolean | void;
        /** On before create events */
        ondblclick?: (self: object, events: Event) => void;
        /** On update event */
        onupdate?: (self: object, value: string) => void;
        /** On change event */
        onchangeevent?: (self: object, newValue: Event, oldValue: Event) => void;
    }

    interface Instance {
        /** Calendar type */
        type?: 'default' | 'inline';
        /** Range picker */
        range?: boolean;
        /** Value */
        value?: number | string;
        /** Calendar value will be a excel-like number or a ISO string. Default false */
        numeric?: boolean;
        /** Bind the calendar to na HTML input element */
        input?: HTMLElement;
    }
}

export default Schedule;
