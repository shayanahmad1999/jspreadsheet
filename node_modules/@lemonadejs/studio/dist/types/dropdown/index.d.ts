/**
 * Official Type definitions for LemonadeJS plugins
 * https://lemonadejs.net
 * Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
 */

declare function Dropdown(el: HTMLElement, options?: Dropdown.Options): Dropdown.Instance;

declare namespace Dropdown {
    interface Item {
        /** Value of the selected item. */
        value?: string | number;
        /** Description of the item */
        text?: string;
        /** Icon of the item */
        image?: string;
        /** Name of the group where the item belongs to */
        group?: string;
        /** Keywords to help finding one item */
        synonym?: string[];
        /** Item is disabled */
        disabled?: boolean;
        /** Color for the item */
        color?: string;
    }

    interface Options {
        /** Preloaded data items for the dropdown */
        data?: Item[];
        /** Format type of the data, typically { id: name } or { value: text } */
        format?: number;
        /** Indicates if multiple item selection is allowed */
        multiple?: boolean;
        /** Enables the autocomplete feature for user input */
        autocomplete?: boolean;
        /** Rendering style of the dropdown: 'default', 'picker', 'searchbar' or inline */
        type?: 'default' | 'picker' | 'searchbar' | 'inline',
        /** Defines the dropdown width */
        width?: number;
        /** The initial value of the dropdown */
        value?: string | string[] | number | number[];
        /** Placeholder text for the dropdown */
        placeholder?: string;
        /** Allow insert new items */
        insert?: boolean;
        /** Specifies the URL for fetching the data. */
        url?: string;
        /** Allow empty. Default: true */
        allowempty?: boolean;
        /** Event handler for value changes */
        onchange?: (obj: object, newValue: string|number) => void;
        /** Event handler for when the dropdown is ready */
        onload?: (obj: object) => void;
        /** Event handler for when the dropdown opens */
        onopen?: (obj: object) => void;
        /** Event handler for when the dropdown closes */
        onclose?: (obj: object) => void;
        /**
         * Event handler for just before a new option is added to the dropdown. This is an async function to handle ajax requests.
         *     Example:
         *     self.beforeInsert = async function(s, element) {
         *         let newId = await getTheNewItemIdFromDatabase(element.text);
         *         return {
         *             text: element.text,
         *             value: newId,
         *         };
         *     }
         *
         * */
        onbeforeinsert?: (obj: object, item: Item) => void;
        /** Event handler for when a new option is added to the dropdown */
        oninsert?: (obj: object, item: Item) => void;
        /** Before the search happens */
        onbeforesearch?: (obj: object, ajaxRequest: object) => boolean | null;
        /** Event handler for processing search results */
        onsearch?: (obj: object, result: object) => void;
    }

    interface Instance {
        /** Internal type */
        type: 'dropdown';
        /** Current internal value */
        value: Record<number, string>;
    }
}

export default Dropdown;